// Copyright (c) 2011-2014 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "arith_uint256.h"
#include "consensus/validation.h"
#include "main.h"
#include "miner.h"
#include "pubkey.h"
#include "uint256.h"
#include "util.h"
#include "crypto/equihash.h"

#include "test/test_bitcoin.h"

#include <boost/test/unit_test.hpp>

BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)

#define NUM_EQUIHASH_SOLUTIONS 8 // k = 3

static
struct {
    const char *nonce_hex;
    uint32_t vSolutions[NUM_EQUIHASH_SOLUTIONS];
} blockinfo[] = {
    {"0000000000000000000000000000000000000000000000000000000000000000", {1113402,26940724,29426619,29650324,1651155,28182833,2919013,20269474,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2541603,14114747,21660764,25879244,5433179,8124465,25666254,26548855,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {11929257,25158964,16095230,24841514,12867411,15686246,25441631,29728310,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {5105680,21328455,16152510,29495600,12443572,24958281,15815721,19841625,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {35834,7761680,14791216,18834970,10322825,29492625,10893714,26525542,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1102283,26829250,13659455,22864463,3780400,22478846,21827356,30064470,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2037605,12627800,15388193,32785696,20790459,24445774,23758535,27841410,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3701973,27733118,20055632,32981287,11852035,23473816,12069611,24241138,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1239069,7235416,16525930,24221834,17217527,18522923,28626536,33160290,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {257184,24892410,5577177,28973426,3838592,21876018,10548097,32849787,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {594750,25868567,15236813,21639078,695051,6577690,7049607,26122407,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2953230,27002289,15387579,25612682,19679247,22183247,27483477,29772736,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {14264159,31139880,19405862,22349908,20538800,32612497,22946641,29253443,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {43271,13347426,4967623,27686294,2049029,10643471,26256712,27072023,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {4264458,5957348,10688362,25520226,5289719,25026457,7796449,22800689,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {826381,32629643,2098678,20063524,2756556,20471197,7523623,30720049,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4448010,24132030,18245842,18676702,5480533,22770981,6876675,13164821,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3619321,9958701,24513456,30709357,6570637,29783605,12349463,19460957,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {3338352,22879126,22388799,28738999,6338378,26770353,11615580,32570967,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {583162,28968143,8506860,10059788,1382777,17695787,7898822,28735790,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {689723,33265955,4951038,26417615,2878474,15296534,17067304,23912090,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {13387048,24067520,19933907,26756676,25442786,31637164,25467610,28623833,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1082504,8652408,9758889,10565277,2825000,24483755,8669404,26856495,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {832465,1290760,8314106,21253530,7392507,18386499,17437969,17897762,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {402809,14238247,8846864,15628890,1394254,25476988,9768531,20445018,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4724342,31383028,17023768,33283980,5666748,16675392,21273019,24165352,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3671473,32986995,19868903,33549652,7343386,19607857,11053667,30367575,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3776234,23322341,13313550,32344754,10577747,13162296,26428875,26771723,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {243097,14613552,5611701,6484778,5891882,23132752,8395009,22156516,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {21983,28268666,9568230,19429881,6008006,24008050,20887568,30451447,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3238065,9482522,10764938,25814521,6563812,8831677,10735823,21915536,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {799412,3035304,15262733,26884054,1434085,10521995,16124208,28240181,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3710111,16217715,18716479,21610969,21762189,23363300,22420670,24987885,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {172576,26167943,14646569,28316841,10493579,28798168,20021148,30720082,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {8420872,31076256,22609922,24941675,15649275,31768823,27195092,27455312,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2635709,28723033,19580012,22376948,11090157,15926084,17679411,24519876,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1753128,10357146,2144657,23878125,5910904,9054774,7382210,24872417,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2453644,32518876,5369995,25186399,12698634,21512754,20357931,32882156,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {8829271,26693212,14001925,27298324,11910802,12882699,13181357,14940933,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1679170,31059898,6265694,10641735,12015435,23038105,19962212,28620913,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2643519,33504705,4356599,17500202,9172412,21700003,15721847,33350879,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2807039,33438306,19754745,32233210,15667749,20376362,18620055,28064823,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3281486,27251459,14067966,23523487,8259568,22590380,13893561,28476964,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {946954,5651933,12745771,23620660,1348853,30591707,18939991,26188704,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1194714,20322323,21075964,26871057,2565364,4491315,8937294,22653696,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {637235,3860119,19707990,20376031,13004891,30800108,13847285,27717772,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3234016,30828372,12722347,24300538,6920497,19090937,7198341,13648746,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {621868,31862815,4019117,8337759,19276345,22342537,30559974,30941776,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {1732075,20994666,6155543,25866809,3635886,22477080,5123596,13432247,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2204518,20921515,12777053,25132755,5063934,14554392,10702268,29914364,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {6406067,20218961,20634617,28827338,11295835,16458724,18683265,31436074,}},
    {"0000000000000000000000000000000000000000000000000000000000000004", {7878007,21165294,8071789,31641431,8904023,17259094,10000563,31794352,}},
    {"0000000000000000000000000000000000000000000000000000000000000006", {5750028,25950324,14832510,30742754,19289275,33373074,19551765,30334371,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {785374,3657166,13462872,17039025,841360,21122444,3591794,8663192,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {6663135,16014329,8015567,27532870,8214530,20513665,14329688,20074961,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {10420672,15431588,30669813,32122115,16834934,23685740,17373413,31595830,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1738923,3877533,5126100,15281834,6162636,24311468,15242152,24469387,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {3729011,33320159,26077521,26772495,12079870,20340043,18905055,20848710,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1899782,12613196,7447739,12133044,6983605,21589090,28189402,28320756,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3684861,24853041,27961196,32686824,6336696,29822601,7668660,16571990,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {4325123,10679550,7352744,15939111,20554616,27073737,26855425,31062910,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {6287964,21839182,8649920,14421276,10805018,12118354,12085375,17757398,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {9517507,20768654,17832112,32506789,16973867,29314279,19522774,31882006,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4593507,11801862,22776242,27239522,5315575,32178272,19359679,29246067,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {70220,9824590,8585166,32653223,2471066,32929905,28303302,30995340,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {2112329,13887696,8915094,9388164,2979335,18058216,6638144,7655413,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {1598751,18664509,3464189,26549834,14569725,21446311,17294910,17945457,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {7407097,11289078,17774594,26390835,12546942,13428469,13407054,25035467,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2381661,12510873,4702134,8667532,17569183,30421813,19155815,22067174,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {269914,9618692,314041,2748558,8267376,27166809,19380913,22511695,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {4539289,7888502,12855014,22139555,5618221,22440563,12938906,13283299,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {8734566,31269742,18087135,28734273,21477794,21932806,24439753,27006766,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1188262,29875085,1555802,17924476,12140044,20111770,25232645,25355017,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1832397,3831442,13088327,29103907,12436658,30784086,21692723,27401659,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2199576,12822824,3157494,23072288,5198744,17718433,26926524,32792676,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {6419439,25870304,7393245,18802491,7791936,18552601,9473880,22310729,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {7013069,23660256,16998725,21932905,13990149,25724364,16911298,27581808,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {471581,12203475,2723947,7113047,15786079,24354137,19011625,22309954,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {8896196,16963078,19359299,32096019,8995579,32939764,9810638,25878351,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1181248,19238611,3809164,29162138,7154558,12567104,13080848,19703519,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {3159364,30879003,25864645,28052580,7950194,24790693,16701888,16864466,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1351562,12572515,1820009,2236616,10623632,13443650,12213300,29122917,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {6395614,31532576,7311043,10903613,15213720,21843676,24512158,30509942,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {6477837,27167216,10603653,31769971,9994098,10362636,13678858,20335701,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {10221363,31336574,14990834,18930315,11237243,19825663,19539543,32836293,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {4367295,26169439,17762319,25998417,9130819,26381016,17089620,33519140,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {4613517,6512918,24599762,26414995,12681444,18904943,17798602,31427364,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3860451,17465681,12090048,25390051,9715631,26138619,15482251,25481590,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {784501,11148617,8619935,12096717,19509386,30494905,20301666,25869317,}},
    {"0000000000000000000000000000000000000000000000000000000000000004", {15985863,17262436,29269412,30002853,23454792,31616235,30450428,32986536,}},
    {"0000000000000000000000000000000000000000000000000000000000000004", {9262794,31375100,19724049,31709447,11614400,21767376,12567350,27208647,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1930259,27620340,9374147,16209672,12127207,15790862,18749713,24745295,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2037675,14809883,2478700,3880212,4322485,32315203,12270271,16346556,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {117986,8138393,9924260,20860963,4853158,13921015,10507877,17593395,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {11692683,14336396,22099757,23606002,23949189,25590567,24622458,29590174,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3043651,6225687,17084299,32798569,3588547,5990245,19014563,24645345,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {568573,17369049,11024897,21817275,3636340,13669739,13852461,23632810,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2363919,17767456,14656543,28392801,12503350,16087276,13869110,31665137,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {2199578,6335833,6936547,24494327,6477788,29903938,15516514,31970217,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {10830339,25496585,13882123,33083752,15548721,31652248,19757093,21446046,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {374835,17320644,27040413,32847830,7963957,12019127,12706216,22517651,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2609477,6610225,19929451,26914203,13981212,26886006,16125588,25033208,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {9363335,29523412,28912941,29371268,16114010,28531419,20059905,28948000,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3391197,19317083,15555354,32678769,5616378,18941218,14472636,15965627,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3715073,28701443,13820848,27234602,4891795,9601840,23734794,25942841,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3971271,14389739,12618800,28651336,13312973,15535545,24816839,29576036,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {2144617,32079731,14138184,14863508,5648295,15898822,13407115,26261273,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {8688716,28058207,9670766,27031282,10808709,20387419,23177453,30815061,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2156330,19076434,5724654,8006651,2841915,3402602,21290399,26647339,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {40417,20280746,10776364,31468848,2879925,21985288,27692340,31524552,}},
};

// NOTE: These tests rely on CreateNewBlock doing its own self-validation!
BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)
{
    CScript scriptPubKey = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
    CBlockTemplate *pblocktemplate;
    CMutableTransaction tx,tx2;
    CScript script;
    uint256 hash;

    LOCK(cs_main);
    fCheckpointsEnabled = false;
    fCoinbaseEnforcedProtectionEnabled = false;

    // We can't make transactions until we have inputs
    // Therefore, load 100 blocks :)
    std::vector<CTransaction*>txFirst;
    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)
    {
        // Simple block creation, nothing special yet:
        BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));

        CBlock *pblock = &pblocktemplate->block; // pointer for convenience
        pblock->nVersion = 4;
        // Fake the blocks taking at least nPowTargetSpacing to be mined.
        // GetMedianTimePast() returns the median of 11 blocks, so the timestamp
        // of the next block must be six spacings ahead of that to be at least
        // one spacing ahead of the tip. Within 11 blocks of genesis, the median
        // will be closer to the tip, and blocks will appear slower.
        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+6*Params().GetConsensus().nPowTargetSpacing;
        CMutableTransaction txCoinbase(pblock->vtx[0]);
        txCoinbase.vin[0].scriptSig = CScript() << (chainActive.Height()+1) << OP_0;
        txCoinbase.vout[0].scriptPubKey = CScript();
        pblock->vtx[0] = CTransaction(txCoinbase);
        if (txFirst.size() < 2)
            txFirst.push_back(new CTransaction(pblock->vtx[0]));
        pblock->hashMerkleRoot = pblock->BuildMerkleTree();
        pblock->nNonce = uint256S(blockinfo[i].nonce_hex);
        pblock->nSolution = std::vector<uint32_t>(blockinfo[i].vSolutions,
                                                  blockinfo[i].vSolutions + NUM_EQUIHASH_SOLUTIONS);

/*
        {
        arith_uint256 try_nonce(0);
        unsigned int n = 96;
        unsigned int k = 3;

        // Hash state
        crypto_generichash_blake2b_state eh_state;
        EhInitialiseState(n, k, eh_state);

        // I = the block header minus nonce and solution.
        CEquihashInput I{*pblock};
        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);
        ss << I;

        // H(I||...
        crypto_generichash_blake2b_update(&eh_state, (unsigned char*)&ss[0], ss.size());

        while (true) {
            pblock->nNonce = ArithToUint256(try_nonce);

            // H(I||V||...
            crypto_generichash_blake2b_state curr_state;
            curr_state = eh_state;
            crypto_generichash_blake2b_update(&curr_state,
                                              pblock->nNonce.begin(),
                                              pblock->nNonce.size());

            // (x_1, x_2, ...) = A(I, V, n, k)
            std::set<std::vector<unsigned int>> solns;
            EhOptimisedSolveUncancellable(n, k, curr_state, solns);

            bool ret;
            for (auto soln : solns) {
                EhIsValidSolution(n, k, curr_state, soln, ret);
                assert(ret);
                pblock->nSolution = soln;

                CValidationState state;
                
                if (ProcessNewBlock(state, NULL, pblock, true, NULL) && state.IsValid()) {
                    goto foundit;
                }

                //std::cout << state.GetRejectReason() << std::endl;
            }

            try_nonce += 1;
        }
        foundit:

            std::cout << "    {\"" << pblock->nNonce.GetHex() << "\", {";
            BOOST_FOREACH(auto num, pblock->nSolution) {
                std::cout << num << ",";
            }
            std::cout << "}}," << std::endl;

        }
*/

        CValidationState state;
        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));
        BOOST_CHECK_MESSAGE(state.IsValid(), state.GetRejectReason());
        pblock->hashPrevBlock = pblock->GetHash();

        // Need to recreate the template each round because of mining slow start
        delete pblocktemplate;
    }

    // Just to make sure we can still make simple blocks
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;

    // block sigops > limit: 1000 CHECKMULTISIG + 1
    tx.vin.resize(1);
    // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].prevout.n = 0;
    tx.vout.resize(1);
    tx.vout[0].nValue = 50000LL;
    for (unsigned int i = 0; i < 1001; ++i)
    {
        tx.vout[0].nValue -= 10;
        hash = tx.GetTxid();
        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // block size > limit
    tx.vin[0].scriptSig = CScript();
    // 18 * (520char + DROP) + OP_1 = 9433 bytes
    std::vector<unsigned char> vchData(520);
    for (unsigned int i = 0; i < 18; ++i)
        tx.vin[0].scriptSig << vchData << OP_DROP;
    tx.vin[0].scriptSig << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vout[0].nValue = 50000LL;
    for (unsigned int i = 0; i < 128; ++i)
    {
        tx.vout[0].nValue -= 350;
        hash = tx.GetTxid();
        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // orphan in mempool
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // child with higher priority than parent
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].prevout.hash = txFirst[1]->GetTxid();
    tx.vout[0].nValue = 39000LL;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vin[0].prevout.hash = hash;
    tx.vin.resize(2);
    tx.vin[1].scriptSig = CScript() << OP_1;
    tx.vin[1].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[1].prevout.n = 0;
    tx.vout[0].nValue = 49000LL;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // coinbase in mempool
    tx.vin.resize(1);
    tx.vin[0].prevout.SetNull();
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;
    tx.vout[0].nValue = 0;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // invalid (pre-p2sh) txn in mempool
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].prevout.n = 0;
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = 49000LL;
    script = CScript() << OP_0;
    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vin[0].prevout.hash = hash;
    tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;
    tx.vout[0].nValue -= 10000;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // double spend txn pair in mempool
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = 49000LL;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vout[0].scriptPubKey = CScript() << OP_2;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // subsidy changing
    int nHeight = chainActive.Height();
    chainActive.Tip()->nHeight = 209999;
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    chainActive.Tip()->nHeight = 210000;
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    chainActive.Tip()->nHeight = nHeight;

    // non-final txs in mempool
    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);

    // height locked
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].nSequence = 0;
    tx.vout[0].nValue = 49000LL;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    tx.nLockTime = chainActive.Tip()->nHeight+1;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));

    // time locked
    tx2.vin.resize(1);
    tx2.vin[0].prevout.hash = txFirst[1]->GetTxid();
    tx2.vin[0].prevout.n = 0;
    tx2.vin[0].scriptSig = CScript() << OP_1;
    tx2.vin[0].nSequence = 0;
    tx2.vout.resize(1);
    tx2.vout[0].nValue = 79000LL;
    tx2.vout[0].scriptPubKey = CScript() << OP_1;
    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;
    hash = tx2.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));

    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));

    // Neither tx should have make it into the template.
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);
    delete pblocktemplate;

    // However if we advance height and time by one, both will.
    chainActive.Tip()->nHeight++;
    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);

    // FIXME: we should *actually* create a new block so the following test
    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.
    //BOOST_CHECK(CheckFinalTx(tx));
    //BOOST_CHECK(CheckFinalTx(tx2));

    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);
    delete pblocktemplate;

    chainActive.Tip()->nHeight--;
    SetMockTime(0);
    mempool.clear();

    BOOST_FOREACH(CTransaction *tx, txFirst)
        delete tx;

    fCheckpointsEnabled = true;
    fCoinbaseEnforcedProtectionEnabled = true;
}

BOOST_AUTO_TEST_SUITE_END()
