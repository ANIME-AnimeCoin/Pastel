// Copyright (c) 2011-2014 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "arith_uint256.h"
#include "consensus/validation.h"
#include "main.h"
#include "miner.h"
#include "pubkey.h"
#include "uint256.h"
#include "util.h"
#include "crypto/equihash.h"

#include "test/test_bitcoin.h"

#include <boost/test/unit_test.hpp>

BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)

#define NUM_EQUIHASH_SOLUTIONS 8 // k = 3

static
struct {
    const char *nonce_hex;
    uint32_t vSolutions[NUM_EQUIHASH_SOLUTIONS];
} blockinfo[] = {
    {"0000000000000000000000000000000000000000000000000000000000000000", {1113402,26940724,29426619,29650324,1651155,28182833,2919013,20269474,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1177894,27738650,6675492,28604467,5392054,11226311,7955710,26013230,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {13757404,24612785,16592045,28164144,15847098,23783079,30472529,32186394,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1564774,27323218,19106817,30336285,8770246,12085107,13421297,27684511,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {1214715,19792419,9555746,16848940,3912654,27149310,22248748,28349834,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {465380,21153671,6976118,9334318,11175832,26840118,20829091,24989124,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {7770071,28627113,10014117,19356236,9848234,9949205,16955539,17109877,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {10886035,16462121,11402801,18676699,18863182,22750783,27913287,29266804,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1459257,20810647,19808682,20039494,5031430,8354170,19960466,32459829,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {178433,26826911,1771363,26729460,5642989,24206105,12393762,32840152,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2983962,12671764,5207290,10330737,4588089,13866899,17946574,26945938,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {113569,14976652,20199317,20667441,6579132,22530896,14397318,23059086,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1632382,17304127,15141824,16463064,7295399,16644827,18572067,20669996,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4749456,26536198,20482514,27288026,5717270,9845012,13548614,28971963,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {2055837,16448853,17705896,25631610,7236935,15115012,17575734,29552166,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {877170,13910144,9449434,31536711,6943373,33381494,10663014,25302057,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {9784626,25888644,20907209,33051489,11883655,14965373,16474297,23765916,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {5738953,22771027,7773450,28347898,17307918,31820567,18592662,20555597,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2820619,5939580,10962894,31649072,17310288,22866383,28287661,28558214,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {1099504,15420400,4135476,20459176,6270569,26126093,14610608,25097930,}},
    {"0000000000000000000000000000000000000000000000000000000000000006", {11005153,20120756,15438817,19194345,11890098,24911591,14550596,19598819,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {811437,13416821,3695389,4980869,3304015,11488217,25631114,28719138,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {3159269,16968786,24550538,29557236,7803747,17822649,8653377,28912768,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {504712,18932458,23483962,32887330,1961796,3859308,4143374,21979566,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1297991,25566210,1398484,9944035,2097862,5362235,10031470,28382554,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {102676,32911897,7721281,31740499,10620001,23816423,16491577,25954318,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {212571,4679973,23085832,31700385,290181,3123715,2520892,9829998,}},
    {"0000000000000000000000000000000000000000000000000000000000000004", {1960800,33289718,10543297,28317859,10240961,23992025,13883111,29268877,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {1295735,3541429,19196941,26229671,2075807,7744035,13892791,16359393,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {83756,13963510,24364674,28161836,3559525,6157435,5068480,30119769,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {1598060,14996774,17503918,32025260,4028700,4185348,9943169,19766624,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2036259,12977312,18211980,25676830,9854809,23688296,20492062,29424122,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {928558,10520944,7857560,29946487,7820310,28906271,23449676,30806524,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {94218,13807430,13196201,14249183,19791079,23217539,20038334,31034870,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1758244,27525162,10779849,22581442,8027113,15876676,17454231,21792768,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {6569294,8336577,15646092,30968838,20697786,22064795,20785097,30483610,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4689186,22004168,22418974,29001467,5786496,9907973,8587341,33248381,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {339519,28863919,3272519,4244748,20886307,33137120,28756344,32931237,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2007251,9819636,2382668,14448240,9055007,23797812,16776484,30849221,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {100639,15413331,5451445,31189400,5954930,14153867,20329951,32020557,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3628427,6969355,11360897,31781667,18525364,22618303,22981181,31888430,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {7110249,21386177,8382166,21176232,16536185,31399855,17464767,19530536,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {2277574,30780181,16112914,17000014,8773633,33091585,14048873,20149459,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2550665,14213654,4242870,4903655,12958653,26655325,16169076,21002376,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {8599195,17050362,14378242,32227198,27632983,28111101,30005170,30066859,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {7392426,31454969,17393740,27621919,14492199,15806556,30071524,31923579,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3441267,24920721,14858570,25338679,26756803,28296345,27899023,29642105,}},
    {"0000000000000000000000000000000000000000000000000000000000000004", {6132931,17329281,7403622,11516026,17955185,33453794,29812795,29957180,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1817438,12293835,9508966,28929257,4881606,27883893,10672774,13799976,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1592008,26013415,3056820,12115596,5721438,22851473,8306360,23832416,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1658911,2372970,2049420,26063504,7254450,17497653,10989879,20867973,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3844166,11413008,7536711,26263212,3913457,22440558,4734959,25245717,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3846824,18789393,8479261,23359846,7357578,15815377,27655724,30991674,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1122706,12234238,1437114,21745512,3042285,7829266,9640973,32099155,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1657055,1741471,6612631,17394399,1771475,2649394,2482138,26380069,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1321865,26432770,1978944,29079168,10432765,16839727,15225774,31509058,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2389998,2427492,16530305,32805965,8721899,21857166,21131122,30763466,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {5142519,31007337,19221500,21637824,10174290,21723998,33158246,33446815,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {654077,14175251,14384173,31117918,18777910,19829161,20073018,31076902,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {490172,27119077,9416149,27036452,9202405,32397812,14789585,30586120,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1426168,8551526,27117488,28956737,7182468,19534844,22573428,24148541,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {3568239,7479271,26848916,28028164,10316849,13221502,13076005,25136771,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2259593,20403947,8752132,24787922,2498248,28355872,12369155,32419366,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {501613,33095679,8486139,12192635,12664951,25303125,26438872,28500516,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2374990,29703045,16601100,22135948,2808865,10410817,4873403,11423815,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3820273,11176433,18037071,28084364,9137913,16151134,12587475,25680991,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3108998,4479515,7553371,16546950,8436773,14725341,12707928,17008882,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {6578517,8614911,18615575,33486778,8226936,31136878,10769236,15300924,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {6129524,27095542,26824782,27959481,11065482,26547800,29288038,32005262,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {8474,30237217,9482038,29054803,4781077,10950607,6745549,32886977,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1211506,19019150,8708723,13874779,6950181,11142331,19174286,20076915,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1688667,24236288,9285246,12989008,14301446,30852413,23907591,25087224,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {8870159,23093851,15080659,28957365,13034803,21764451,25571497,32229377,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {1533183,5661840,26047327,33275547,9546764,10489532,16575096,20438816,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {155170,11688838,8463756,8762265,861970,2097310,1687008,8229727,}},
    {"0000000000000000000000000000000000000000000000000000000000000003", {4363095,28366890,14920354,22598934,12250321,29200126,12268459,13241216,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {3232004,25476628,8264172,32689379,11710053,22028333,13203433,32903338,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {310014,25211270,9028052,31811694,4976848,26452941,11047133,19665723,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {576900,2104019,6469363,6683826,3080847,5111320,28147384,28650213,}},
    {"0000000000000000000000000000000000000000000000000000000000000005", {1532187,21848241,7123572,12545782,3881386,7978429,5434081,28331220,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {388562,4005372,7234172,29049575,7223667,14805722,10878566,33393207,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {5850262,32677763,15556500,16735812,11341911,17951156,13922062,14410547,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2424054,11014354,9779764,21557113,3111131,8166331,4859205,14574649,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {801937,12980814,16785187,26496355,3080644,32489047,6453334,16622214,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {202609,8154906,11662127,27093535,2030772,14156122,28634426,31111028,}},
    {"0000000000000000000000000000000000000000000000000000000000000006", {325499,8756842,4808323,32441916,15410067,31808785,25390711,32205778,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1166390,21819687,19693253,33102452,7921702,13369411,22436213,30088108,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {777300,27199773,12777655,30048491,9643279,32805170,22663801,23464043,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {1008164,33481804,5980171,8538640,7610328,18980163,20521032,33254832,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {881598,14389174,6105333,7062127,5566689,18077097,7461556,11154426,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1339637,23466773,2803293,20456584,6947870,28635426,9834951,33068674,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1723002,2963927,10155602,32745822,6241452,20915262,16337613,24849765,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2161203,4371222,19041750,20784444,3720141,25974149,19064987,23359092,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2876839,25605592,22613353,32322921,7640014,8241405,14912558,16715717,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {2483067,5388280,12085418,16625867,6364517,16365140,21978108,28922151,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {1219910,13649699,15817745,21343281,17410892,17554172,18698843,22991164,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1240982,13018635,12806785,16813220,1848080,12964338,5040783,19040748,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {6012000,25212426,13475157,17396160,7563959,27657052,17189044,30836716,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {7856443,31534474,13787279,29019766,12879952,28711973,14288089,27358381,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {424699,25193206,11746962,14461021,623744,20147894,8098101,24213779,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {4441173,26265491,8225467,8917949,5364511,15543455,22937473,32124778,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1200582,16316000,4043019,18041061,19343454,25757784,26565048,33237015,}},
    {"0000000000000000000000000000000000000000000000000000000000000002", {757446,15752870,10558842,29838164,11505137,28967804,14190960,26120932,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {4607691,18648889,8504702,15574030,6974736,33492450,24791405,32775597,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {99730,18423493,4667626,29947237,9820438,30506336,20122752,29685762,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1075001,26105351,1967981,6264350,20852748,29843814,28119876,29893576,}},
    {"0000000000000000000000000000000000000000000000000000000000000001", {1591400,9613349,27352831,31596759,15855520,31366449,24703378,31819045,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {1807796,26897061,2327536,9518175,12634385,28816117,16732365,31443476,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {11514565,33453820,26026963,29208850,12383145,31894222,20059767,27374118,}},
    {"0000000000000000000000000000000000000000000000000000000000000000", {14176825,16056472,30276898,32522827,15873156,24924038,20529628,31256168,}},
};

// NOTE: These tests rely on CreateNewBlock doing its own self-validation!
BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)
{
    CScript scriptPubKey = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
    CBlockTemplate *pblocktemplate;
    CMutableTransaction tx,tx2;
    CScript script;
    uint256 hash;

    LOCK(cs_main);
    fCheckpointsEnabled = false;
    fCoinbaseEnforcedProtectionEnabled = false;

    // We can't make transactions until we have inputs
    // Therefore, load 100 blocks :)
    std::vector<CTransaction*>txFirst;
    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)
    {
        // Simple block creation, nothing special yet:
        BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));

        CBlock *pblock = &pblocktemplate->block; // pointer for convenience
        pblock->nVersion = 4;
        // Fake the blocks taking at least nPowTargetSpacing to be mined.
        // GetMedianTimePast() returns the median of 11 blocks, so the timestamp
        // of the next block must be six spacings ahead of that to be at least
        // one spacing ahead of the tip. Within 11 blocks of genesis, the median
        // will be closer to the tip, and blocks will appear slower.
        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+6*Params().GetConsensus().nPowTargetSpacing;
        CMutableTransaction txCoinbase(pblock->vtx[0]);
        txCoinbase.vin[0].scriptSig = CScript() << (chainActive.Height()+1) << OP_0;
        txCoinbase.vout[0].scriptPubKey = CScript();
        pblock->vtx[0] = CTransaction(txCoinbase);
        if (txFirst.size() < 2)
            txFirst.push_back(new CTransaction(pblock->vtx[0]));
        pblock->hashMerkleRoot = pblock->BuildMerkleTree();
        pblock->nNonce = uint256S(blockinfo[i].nonce_hex);
        pblock->nSolution = std::vector<uint32_t>(blockinfo[i].vSolutions,
                                                  blockinfo[i].vSolutions + NUM_EQUIHASH_SOLUTIONS);

/*
        {
        arith_uint256 try_nonce(0);
        unsigned int n = 96;
        unsigned int k = 3;

        // Hash state
        crypto_generichash_blake2b_state eh_state;
        EhInitialiseState(n, k, eh_state);

        // I = the block header minus nonce and solution.
        CEquihashInput I{*pblock};
        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);
        ss << I;

        // H(I||...
        crypto_generichash_blake2b_update(&eh_state, (unsigned char*)&ss[0], ss.size());

        while (true) {
            pblock->nNonce = ArithToUint256(try_nonce);

            // H(I||V||...
            crypto_generichash_blake2b_state curr_state;
            curr_state = eh_state;
            crypto_generichash_blake2b_update(&curr_state,
                                              pblock->nNonce.begin(),
                                              pblock->nNonce.size());

            // (x_1, x_2, ...) = A(I, V, n, k)
            std::set<std::vector<unsigned int>> solns;
            EhOptimisedSolveUncancellable(n, k, curr_state, solns);

            bool ret;
            for (auto soln : solns) {
                EhIsValidSolution(n, k, curr_state, soln, ret);
                assert(ret);
                pblock->nSolution = soln;

                CValidationState state;
                
                if (ProcessNewBlock(state, NULL, pblock, true, NULL) && state.IsValid()) {
                    goto foundit;
                }

                //std::cout << state.GetRejectReason() << std::endl;
            }

            try_nonce += 1;
        }
        foundit:

            std::cout << "    {\"" << pblock->nNonce.GetHex() << "\", {";
            BOOST_FOREACH(auto num, pblock->nSolution) {
                std::cout << num << ",";
            }
            std::cout << "}}," << std::endl;

        }
*/

        CValidationState state;
        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));
        BOOST_CHECK_MESSAGE(state.IsValid(), state.GetRejectReason());
        pblock->hashPrevBlock = pblock->GetHash();

        // Need to recreate the template each round because of mining slow start
        delete pblocktemplate;
    }

    // Just to make sure we can still make simple blocks
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;

    // block sigops > limit: 1000 CHECKMULTISIG + 1
    tx.vin.resize(1);
    // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].prevout.n = 0;
    tx.vout.resize(1);
    tx.vout[0].nValue = 50000LL;
    for (unsigned int i = 0; i < 1001; ++i)
    {
        tx.vout[0].nValue -= 10;
        hash = tx.GetTxid();
        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // block size > limit
    tx.vin[0].scriptSig = CScript();
    // 18 * (520char + DROP) + OP_1 = 9433 bytes
    std::vector<unsigned char> vchData(520);
    for (unsigned int i = 0; i < 18; ++i)
        tx.vin[0].scriptSig << vchData << OP_DROP;
    tx.vin[0].scriptSig << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vout[0].nValue = 50000LL;
    for (unsigned int i = 0; i < 128; ++i)
    {
        tx.vout[0].nValue -= 350;
        hash = tx.GetTxid();
        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // orphan in mempool
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // child with higher priority than parent
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].prevout.hash = txFirst[1]->GetTxid();
    tx.vout[0].nValue = 39000LL;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vin[0].prevout.hash = hash;
    tx.vin.resize(2);
    tx.vin[1].scriptSig = CScript() << OP_1;
    tx.vin[1].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[1].prevout.n = 0;
    tx.vout[0].nValue = 49000LL;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // coinbase in mempool
    tx.vin.resize(1);
    tx.vin[0].prevout.SetNull();
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;
    tx.vout[0].nValue = 0;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // invalid (pre-p2sh) txn in mempool
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].prevout.n = 0;
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = 49000LL;
    script = CScript() << OP_0;
    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vin[0].prevout.hash = hash;
    tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;
    tx.vout[0].nValue -= 10000;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // double spend txn pair in mempool
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = 49000LL;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    tx.vout[0].scriptPubKey = CScript() << OP_2;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    mempool.clear();

    // subsidy changing
    int nHeight = chainActive.Height();
    chainActive.Tip()->nHeight = 209999;
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    chainActive.Tip()->nHeight = 210000;
    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    delete pblocktemplate;
    chainActive.Tip()->nHeight = nHeight;

    // non-final txs in mempool
    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);

    // height locked
    tx.vin[0].prevout.hash = txFirst[0]->GetTxid();
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].nSequence = 0;
    tx.vout[0].nValue = 49000LL;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    tx.nLockTime = chainActive.Tip()->nHeight+1;
    hash = tx.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));

    // time locked
    tx2.vin.resize(1);
    tx2.vin[0].prevout.hash = txFirst[1]->GetTxid();
    tx2.vin[0].prevout.n = 0;
    tx2.vin[0].scriptSig = CScript() << OP_1;
    tx2.vin[0].nSequence = 0;
    tx2.vout.resize(1);
    tx2.vout[0].nValue = 79000LL;
    tx2.vout[0].scriptPubKey = CScript() << OP_1;
    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;
    hash = tx2.GetTxid();
    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));
    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));

    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));

    // Neither tx should have make it into the template.
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);
    delete pblocktemplate;

    // However if we advance height and time by one, both will.
    chainActive.Tip()->nHeight++;
    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);

    // FIXME: we should *actually* create a new block so the following test
    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.
    //BOOST_CHECK(CheckFinalTx(tx));
    //BOOST_CHECK(CheckFinalTx(tx2));

    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);
    delete pblocktemplate;

    chainActive.Tip()->nHeight--;
    SetMockTime(0);
    mempool.clear();

    BOOST_FOREACH(CTransaction *tx, txFirst)
        delete tx;

    fCheckpointsEnabled = true;
    fCoinbaseEnforcedProtectionEnabled = true;
}

BOOST_AUTO_TEST_SUITE_END()
